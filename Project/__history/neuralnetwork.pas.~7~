unit neuralnetwork;

interface

implementation

uses Mainmenu,  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,dialogs;

procedure train();
var
  i, j, k, l, m: integer;
  inputlayer, hiddenlayer: array [1 .. 7] of real;
  biasmask1: array [1 .. 49] of real;
  hiddenlayer2: array [1 .. 3] of real;
  biasmask2: array [1 .. 21] of real;
  biasmask3: array [1 .. 3] of real;
  outputvalue: real;
  dbfields:array of string;
begin
  dbfields := ['Danceability', 'Energy', 'Speechiness', 'Acousticness',
    'Valence', 'Tempo', 'Time Signature']; //For iterating through field names

  frmMainmenu.tblSongProperties.Active:=False;//Refresh Table to make sure it has up to date data
  frmMainmenu.tblSongProperties.Active:=True;
  //frmMainMenu.tblSongProperties.Locate('ID', SongId1, []); //Addresses only the correct song ID
  for i := 1 to 7 do   //Initialise the input layer with values from DB
  begin
  inputlayer[i]:=frmMAinmenu.tblSongProperties.FieldByName(dbfields[i]).AsFloat;
  end;


  for i := 1 to 49 do   //Initialise bias mask 1 with random function
  begin
  biasmask1[i]:=random;
  end;

  for i := 1 to 21 do   //Initialise bias mask 2 with random function
  begin
  biasmask2[i]:=random;
  end;

  for i := 1 to 3 do   //Initialise bias mask 3 with random function
  begin
  biasmask3[i]:=random;
  end;


end;

end.
