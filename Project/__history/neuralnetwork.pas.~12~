unit neuralnetwork;

interface

procedure train(songID: string);

implementation

uses Mainmenu, Winapi.Windows, Winapi.Messages, System.SysUtils,
  System.Variants,
  System.Classes, Vcl.Graphics, dialogs, math;

procedure train(songID: string);
var
  i, j, k, l, m: integer;
  inputlayer, hiddenlayer1: array [0 .. 6] of real;
  biasmask1: array [0 .. 48] of real;
  hiddenlayer2: array [0 .. 2] of real;
  biasmask2: array [0 .. 20] of real;
  biasmask3: array [0 .. 2] of real;
  outputvalue: real;
  dbfields: array of string;
begin
  dbfields := ['Danceability', 'Energy', 'Speechiness', 'Acousticness',
    'Valence', 'Tempo', 'Time Signature']; // For iterating through field names

  frmMainmenu.tblSongProperties.Active := False;
  // Refresh Table to make sure it has up to date data
  frmMainmenu.tblSongProperties.Active := True;
  frmMainmenu.tblSongProperties.Locate('ID', songID, []);

 //Initialisation
  // Addresses only the correct song ID
  for i := 0 to 6 do // Initialise the input layer with values from DB
  begin
    inputlayer[i] := frmMainmenu.tblSongProperties.FieldByName
      (dbfields[i]).AsFloat;
    showmessage(floattostr(inputlayer[i]));
  end;

  for i := 0 to 48 do // Initialise bias mask 1 with random function
  begin
    biasmask1[i] := (randomrange(-100000, 100000) / 100000);
    // Generates a random number
    // between -1 and 1
  end;

  for i := 0 to 20 do // Initialise bias mask 2 with random function
  begin
    biasmask2[i] := (randomrange(-100000, 100000) / 100000);
    // Generates a random number
    // between -1 and 1
  end;

  for i := 1 to 3 do // Initialise bias mask 3 with random function
  begin
    biasmask3[i] := (randomrange(-100000, 100000) / 100000);
    // Generates a random number
    // between -1 and 1
  end;


 //All initialised

//-----------------------------------

 //First Run Calculations
for j := 0 to 6 do
  begin
    for k := 0 to 6 do
    begin
    hiddenlayer1[j]:=hiddenlayer1[j]+(inputlayer[k]*biasmask1[7*j]);
    end;
  showmessage(floattostr(hiddenlayer1[j]));
  end;




 //

//-----------------------------------

 //Error Correction Algorithm



 //

//-----------------------------------



end;

end.
